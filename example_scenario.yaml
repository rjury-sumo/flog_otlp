name: "Example Log Pattern Scenario with Filtering"
description: "Demonstrates mixed log levels over time with asynchronous execution and regex filtering - info logs, then error logs, then recovery"

steps:
  # Phase 1: Normal operations with info logs - run 60 times every 5 seconds
  # Filter for GET requests and successful responses
  - start_time: "0s"
    interval: "5s"
    iterations: 60
    parameters:
      format: "json"
      number: 100
      sleep: "10s"
      telemetry_attributes:
        - "log_level=info"
        - "test_phase=normal_operations"
        - "service_tier=web"
      otlp_attributes:
        - "environment=test"
        - "scenario=example"
    filters:
      - "status.{1,3}:[23][0-9][0-9]"                # Match successful requests (200-300)
      - "info.*login.*success"        # Match successful login info messages

  # Phase 2: Error condition with higher log volume - start at 1 minutes, run 5 times every 5 seconds  
  # Filter for error conditions and failed requests
  - start_time: "1m"
    interval: "5s"
    iterations: 5
    parameters:
      format: "json"
      number: 200  # Double the log volume
      sleep: "15s"
      telemetry_attributes:
        - "log_level=error"
        - "test_phase=error_condition"
        - "service_tier=web"
        - "incident=true"
      otlp_attributes:
        - "environment=test"
        - "scenario=example"
        - "alert_state=triggered"
    filters:
      - "(?i)error|exception|fail|fatal"    # Match error/exception/failure messages
      - "[45][0-9][0-9]"              # Match 4xx/5xx HTTP status codes
      - "timeout|connection.*lost"    # Match timeout or connection issues

  # Phase 3: Recovery period with warning logs - start at 2 minutes, run 2 times every 15 seconds
  # Filter for warning messages and recovery indicators, with data anonymization
  - start_time: "2m"
    interval: "15s"
    iterations: 2
    parameters:
      format: "json"
      number: 80
      sleep: "10s"
      telemetry_attributes:
        - "log_level=warn"
        - "test_phase=recovery"
        - "service_tier=web"
        - "recovery=in_progress"
      otlp_attributes:
        - "environment=test"
        - "scenario=example"
        - "alert_state=recovering"
    filters:
      - "(?i)warn|warning"            # Match warning messages
      - "status.{1,3}:[34][0-9][0-9]"  # Match recovery-related events
    replacements:
      # Anonymize user IDs with random numbers
      - pattern: "user[_-]?id[=:]\\d+"
        replacement: "user_id=%n[10000,99999]"
      # Replace IP addresses with random ones
      - pattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"
        replacement: "%n[10,192].%n[1,255].%n[1,255].%n[1,255]"
      # Generate session tokens for authentication logs
      - pattern: "session[_-]?token[=:]\\w+"
        replacement: "session_token=%x[32]"
      # Replace timestamps with current epoch time
      - pattern: "timestamp[=:]\\d+"
        replacement: "timestamp=%e"
      # Add realistic recovery messages
      - pattern: "message[=:]\"[^\"]*recovery[^\"]*\""
        replacement: "message=\"System recovery in progress: %s\""
      # Generate correlation IDs for distributed tracing
      - pattern: "correlation[_-]?id[=:]\\w+"
        replacement: "correlation_id=%g"
      # Replace trace IDs with GUIDs
      - pattern: "trace[_-]?id[=:]\\w+"
        replacement: "trace_id=%g"